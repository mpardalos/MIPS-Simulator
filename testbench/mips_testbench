#!/bin/bash

SIMULATOR=$1
TESTS_DIR=bin/tests

function info_file() {
    echo $1 | sed 's/\..*$/.info/g'
}

for testbin in $(find $TESTS_DIR | grep -E *.mips.bin); do
    infofile=$(info_file $testbin)

    if ! [[ -f $infofile ]]; then
        (echo "$testbin is missing an info file!" 1>&2)
        continue
    fi

    # Extract all fields from the info file
    # the `sed` command is used first to select lines from a file and 
    # then to select parts of that line
    test_filename=${testbin##*/}
    test_id=${test_filename%%.mips.bin}
    author=$(sed -n '/^author:/p' $infofile  | sed 's/^author:\s*//g')
    message=$(sed -n '/^message:/p' $infofile | sed 's/^message:\s*//g')
    instruction=$(sed -n '/^instruction:/p' $infofile | sed 's/^instruction:\s*//g')
    expected_out=$(sed -n '/^output:/p' $infofile | sed 's/^output:\s*//g')
    [ -z expected_out ] && expected_out = ''
    expected_exit_code=$(sed -n '/^exit_code:/p' $infofile | sed 's/^exit_code:\s*//g')
    [ -z expected_exit_code ] && expected_exit_code = '0'

    printf "$test_id, $instruction, "

    # Run binary and capture exit code and output
    out=$($SIMULATOR $testbin)
    exit_code=$?

    # If the exit code and output match what was expected, the test passes
    if [ "$out" = "$expected_out" ] && [ "$exit_code" = "$expected_exit_code" ]; then
        pass='Pass'
    else 
        pass='Fail'
    fi

    echo "$pass, $author, $message"

done
